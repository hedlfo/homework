3.명령어

사람이 이해하는 언어 - 고급언어
컴퓨터가 이해하는 언어 -저급언어
기계어-0과1로 이루어진 언어
사람이 읽기 쉽게 등장한 저급 언어-어셈블리어

고급언어->저급언어로 변환되는 방법 두가지
1-컴파일 언어
:컴파일러에 의해 소스 코드 전체가 저급 언어로 변환되어 실행되는 고급 언어
대표적인 컴파일 언어로는 C가 있다.
고급 언어가 저급언어로 변환되는 과정을 '컴파일'이라고 하고
컴파일을 수행해주는 도구를 '컴파일러'라고 함.

2-인터프리터 언어
인터프리터에 의해 소스 코드가 한줄씩 실행되는 고급 언어
대표적인 인터프리터 언어로 PYTHON이 있다.


연산 코드와 오퍼랜드
명령어가 수행할 연산-연산 코드(연산자)
연산에 사용할 데이터, 연산에 사용할 데이터가 저장된 위치-오퍼랜드(피연산자)
1-오퍼랜드
:숫자나 문자보다는 연산에 사용될 데이터가 저장된 위치, 즉 메모리 주소나 레지스터 이름이 담김.
그래서 '주소 필드'라고도 불림.

2-연산 코드
연산 코드 네가지 유형
1-데이터 전송
-MOVE : 데이터를 옮겨라
-STORE : 메모리에 저장하라
-LOAD : 메모리에서 CPU로 데이터를 가져와라
-PUSH : 스택에 데이터를 저장하라
-POP : 스택의 최상단 데이터를 가져와라

2-산술/논리 연산
ADD/SUBTRACT/MULTIPLY/DIVIDE : 덧셈/뺄셈/곱셈/나눗셈을 수행하라
INCREMENT/DECREMENT : 오퍼랜드에 1을 더하라/1을 빼라
AND/OR/NOT :AND /OR/NOT 연산을 수행하라
COMPARE : 두개의 숫자 또는 TRUE /FALSE값을 비교하라

3- 제어 흐름 변경
JUMP : 특정 주소로 실행 순서를 옮겨라
CONDITIONAL JUMP : 조건에 부합할 때 특정 주소로 실행 순서를 옮겨라
HALT : 프로그램의 실행을 멈춰라
CALL : 되돌아올 주소를 저장한 채 특정 주소로 실행 순서를 옮겨라
RETURN : CALL을 호출할 때 저장했던 주소로 돌아가라

4-입출력 제어
READ(INPUT): 특정입출력 장치로부터 데이터를 읽어라
WRITE(OUTPUT): 특정 입출력 장치로 데이터를 써라
START IO : 입출력 장치를 시작하라
TEST IO : 입출력 장치의 상태를 확인하라

주소 지정 방식
연산의 대상이 되는 데이터가 저장됨 위치를 '유효 주소'라고 함.
오퍼랜드 필드에 데이터가 저장된 위치를 명시할때 연산에 사용할 데이터 위치를 찾는 방법을
'주소 지정 방식'이라고 함.

1-즉시 주소 지정 방식
연산에 사용할 데이터를 오퍼랜드 필드에 직접 명시하는 방식

2-직접 주소 지정 방식
오퍼랜드 필드에 유효 주소를 직접적으로 명시하는 방식

3-간접 주소 지정 방식
유효 주소의 주소를 오퍼랜드 필드에 명시하는 방식

4-레지스터 주조 지정 방식
연산에 사용할 데이터를 저장한 레지스터를 오퍼랜드 필드에 직접 명시하는 방식

5-레지스터 간접 주소 지정 방식
연산에 사용할 데이터를 메모리에 저장하고, 그 주소를 저장한 레지스터를 오퍼랜드 필드에 명시하는 방법
